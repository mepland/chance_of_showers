[tool.poetry]
name = "chance-of-showers"
version = "0.0.0"
description = "DAQ and analysis code for chance_of_showers water metrics project"
authors = ["Matthew Epland"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
hydra-core = "^1.3.2"
numpy = "^1.24.3"
polars = "^0.18.4"
humanize = "^4.7.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
black = {extras = ["jupyter"], version = "^23.7.0"}
blacken-docs = "^1.14.0"
flake8 = "^6.0.0"
mypy = "^1.4.1"
isort = "^5.12.0"
pylint = "^2.17.4"
bandit = "^1.7.5"
detect-secrets = "^1.4.0"
vulture = "^2.7"
yamllint = "^1.32.0"
blocklint = "^0.2.4"
powerline-status = "^2.7"
pandas-stubs = "^2.0.2.230605"
types-pillow = "^9.5.0.5"
types-pyyaml = "^6.0.12.10"
types-pygments = "^2.15.0.1"
types-colorama = "^0.4.15.11"
types-decorator = "^5.1.8.3"
types-six = "^1.16.21.8"
flake8-annotations = "^3.0.1"
flake8-docstrings = "^1.7.0"
flake8-bugbear = "^23.6.5"
flake8-builtins = "^2.1.0"
flake8-comprehensions = "^3.13.0"
flake8-eradicate = "^1.5.0"
flake8-pytest-style = "^1.7.2"
flake8-pyprojecttoml = "^0.0.2"
flake8-boolean-trap = "^1.0.0"
flake8-dunder-class-obj = "^0.1.1"
flake8-get-chaining = "^0.2.0"
flake8-github-annotations = "^1.1.1"
flake8-inflammatory-jargon = "^1.0.1"
flake8-noqa = "^1.3.2"
flake8-async = "^22.11.14"
flake8-keyword-params = "^1.1.1"
flake8-mutable = "^1.2.0"
flake8-no-debug-vars = "^0.1.0"
flake8-picky-parentheses = "^0.5.0"
flake8-future-annotations = "^1.1.0"
flake8-loopy = "^1.1.0"
flake8-pie = "^0.16.0"
flake8-secure-coding-standard = "^1.4.0"
flake8-simplify = "^0.20.0"
flake8-unused-arguments = "^0.0.13"
flake8-return = "^1.2.0"
flake8-datetimez = "^20.10.0"
flake8-import-conventions = "^0.1.0"
flake8-typing-as-t = "^0.0.3"
flake8-type-checking = "^2.4.0"
flake8-pep585 = "^0.1.7"
flake8-printf-formatting = "^1.1.2"
flake8-pep3101 = "^2.0.0"
flake8-string-format = "^0.3.0"
flake8-no-implicit-concat = "^0.3.4"
flake8-escaping-style = "^0.1.2"
flake8-literal = "^1.3.0"
darglint = "^1.8.1"
pyupgrade = "^3.9.0"

[tool.poetry.group.daq]
optional = true

[tool.poetry.group.daq.dependencies]
adafruit-circuitpython-mcp3xxx = "^1.4.14"
gpiozero = "^1.6.2"
rpi-gpio = "^0.7.1"
"luma.oled" = "^3.12.0"
pause = "^0.3"
psutil = "^5.9.5"

[tool.poetry.group.web]
optional = true

[tool.poetry.group.web.dependencies]
flask = "^2.3.2"
flask-socketio = "^5.3.4"
simple-websocket = "^0.10.0"
python-arptable = "^0.0.2"

[tool.poetry.group.ana]
optional = true

[tool.poetry.group.ana.dependencies]
pandas = "^2.0.1"
matplotlib = "^3.7.1"
jupyterlab = "^3.6.3"
statsmodels = "^0.14.0"
jupytext = "^1.14.5"
jupyter-dash = "^0.4.2"
plotly = "^5.14.1"
pyarrow = "^12.0.1"
prophet = "^1.1.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py311"]
extend-exclude = '''
/(
  ^\.cache
  | \.direnv
  | \.env
  | \.git
  | \.github
  | \.ipynb_checkpoints
  | \.venv
  | __pycache__
)/
'''

[tool.flake8]
max-complexity = 18
docstring-convention = "google"
docstring_style = "google" # darglint
ignore = [
"E501",
"W503",
"ESC102",
"TYT03",
"SCS109",
"PIE786",
]
extend-select = [
"B901",
"B902",
"B903",
"B904",
"B905",
"B906",
"B907",
"B908",
]
per-file-ignores = """
    ana/*.py: E800
    daq/daq.py: E402
"""
exclude = [
    ".cache",
    ".direnv",
    ".env",
    ".git",
    ".github",
    ".ipynb_checkpoints",
    ".venv",
    "__pycache__"
]
literal-inline-quotes="double"

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disable_error_code = [
    "import",
]
# warn_unused_ignores = true is useful when upgrading mypy versions,
# but leaving it as true all the time gives false positives when running mypy in the pre-commit env
warn_unused_ignores = false
exclude = [
    ".cache",
    ".direnv",
    ".env",
    ".git",
    ".github",
    ".ipynb_checkpoints",
    ".venv",
    "__pycache__"
]

[tool.isort]
py_version = "311"
profile = "black"
multi_line_output = 3
combine_star = "true"
group_by_package = "true"
skip_gitignore = "true"
atomic = "true"
treat_comments_as_code = ["# %%"]

[tool.pylint.main]
fail-under = 10
jobs = 0
py-version = "3.11"
suggestion-mode = true
ignore = [
    ".cache",
    ".direnv",
    ".env",
    ".git",
    ".github",
    ".ipynb_checkpoints",
    ".venv",
    "__pycache__"
]

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "line-too-long",
    "global-statement",
    "useless-return",
    "too-many-branches",
    "too-many-lines",
    "wrong-import-position",
    "ungrouped-imports",
    "unnecessary-pass",
    "broad-exception-caught",
    "logging-format-interpolation",
    "logging-fstring-interpolation",
    "logging-not-lazy"
]

[tool.pylint.design]
max-args = 10
max-locals = 25
max-statements = 75

[tool.pylint.basic]
attr-naming-style = "snake_case"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "snake_case"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_", "x", "y", "ax"]

[tool.vulture]
paths = ["."]
exclude = [
    ".cache",
    ".direnv",
    ".env",
    ".git",
    ".github",
    ".ipynb_checkpoints",
    ".venv",
    "__pycache__"
]
