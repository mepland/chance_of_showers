# This workflow will install Python dependencies and run tests
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: test

on:  # yamllint disable-line rule:truthy
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        poetry-version: ["1.5"]

    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install Dependencies
        run: poetry install --with daq,web,ana,dev

      - name: poetry
        run: poetry check && poetry lock --no-update

      - name: black
        uses: psf/black@stable
        with:
          options: "--check --diff"
          src: "."
          jupyter: true

      - name: blacken-docs
        run: poetry run blacken-docs --line-length=100 $(git ls-files '*.py') $(git ls-files '*.md') $(git ls-files '*.rst')  # yamllint disable-line rule:line-length

      - name: flake8
        uses: py-actions/flake8@v2
        with:
          plugins: [
            "flake8-annotations",
            "flake8-docstrings",
            "flake8-bugbear",
            "flake8-builtins",
            "flake8-comprehensions",
            "flake8-eradicate",
            "flake8-pytest-style",
            "flake8-pyprojecttoml",
            "flake8-boolean-trap",
            "flake8-dunder-class-obj",
            "flake8-get-chaining",
            "flake8-github-annotations",
            "flake8-inflammatory-jargon",
            "flake8-noqa",
            "flake8-async",
            "flake8-keyword-params",
            "flake8-mutable",
            "flake8-no-debug-vars",
            "flake8-picky-parentheses",
            "flake8-future-annotations",
            "flake8-loopy",
            "flake8-pie",
            "flake8-secure-coding-standard",
            "flake8-simplify",
            "flake8-unused-arguments",
            "flake8-return",
            "flake8-datetimez",
            "flake8-import-conventions",
            "flake8-typing-as-t",
            "flake8-type-checking",
            "flake8-pep585",
            "flake8-printf-formatting",
            "flake8-pep3101",
            "flake8-string-format",
            "flake8-no-implicit-concat",
            "flake8-escaping-style",
            "flake8-literal"
          ]

      - name: mypy
        run: poetry run mypy .

      - name: isort
        uses: isort/isort-action@master

      - name: pylint
        run: poetry run pylint $(git ls-files '*.py')

      - name: bandit
        run: poetry run bandit -r .

      - name: detect-secrets
        run: poetry run detect-secrets
        with:
          options: "--baseline=.secrets.baseline"

      - name: vulture
        run: poetry run vulture

      - name: pyupgrade
        run: poetry run pyupgrade

      - name: yamllint
        run: poetry run yamllint --strict .

      - name: blocklint
        run: poetry run blocklint
