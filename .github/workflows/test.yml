# This workflow will install Python dependencies and run tests
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: test

on:  # yamllint disable-line rule:truthy
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        poetry-version: ["1.5"]

    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install Dependencies
        run: poetry install --with daq,web,ana,dev

      - name: poetry
        run: poetry check && poetry lock --no-update

      - name: black
        uses: psf/black@stable
        with:
          options: "--check --diff"
          src: "."
          jupyter: true

      - name: blacken-docs
        run: poetry run blacken-docs --line-length=100 $(git ls-files '*.py') $(git ls-files '*.md') $(git ls-files '*.rst')  # yamllint disable-line rule:line-length

      - name: flake8
        uses: py-actions/flake8@v2
        with:
          plugins: "flake8-annotationsg flake8-docstringsg flake8-bugbearg flake8-builtinsg flake8-comprehensionsg flake8-eradicateg flake8-pytest-styleg flake8-pyprojecttomlg flake8-boolean-trapg flake8-dunder-class-objg flake8-get-chainingg flake8-github-annotationsg flake8-inflammatory-jargong flake8-noqag flake8-asyncg flake8-keyword-paramsg flake8-mutableg flake8-no-debug-varsg flake8-picky-parenthesesg flake8-future-annotationsg flake8-loopyg flake8-pieg flake8-secure-coding-standardg flake8-simplifyg flake8-unused-argumentsg flake8-returng flake8-datetimezg flake8-import-conventionsg flake8-typing-as-tg flake8-type-checkingg flake8-pep585g flake8-printf-formattingg flake8-pep3101g flake8-string-formatg flake8-no-implicit-concatg flake8-escaping-styleg flake8-literal"

      - name: mypy
        run: poetry run mypy .

      - name: isort
        uses: isort/isort-action@master

      - name: pylint
        run: poetry run pylint $(git ls-files '*.py')

      - name: bandit
        run: poetry run bandit -r .

      - name: detect-secrets
        run: poetry run detect-secrets
        with:
          options: "--baseline=.secrets.baseline"

      - name: vulture
        run: poetry run vulture

      - name: pyupgrade
        run: poetry run pyupgrade

      - name: yamllint
        run: poetry run yamllint --strict .

      - name: blocklint
        run: poetry run blocklint
