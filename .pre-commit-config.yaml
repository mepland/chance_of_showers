# See https://pre-commit.com for more information
repos:

  # poetry - commented out due to long run times
  # - repo: https://github.com/python-poetry/poetry
  #   rev: '1.5.0'
  #   hooks:
  #     - id: poetry-check
  #     - id: poetry-lock

  # isort
  - repo: https://github.com/pycqa/isort
    rev: '5.13.2'
    hooks:
      - id: isort

  # black
  - repo: https://github.com/psf/black
    rev: '24.1.1'
    hooks:
      - id: black-jupyter
  - repo: https://github.com/adamchainz/blacken-docs
    rev: '1.16.0'
    hooks:
      - id: blacken-docs
        args: ['--line-length=100']
        additional_dependencies: ['black==23.7.0']

  # flake8
  - repo: https://github.com/pycqa/flake8
    rev: '7.0.0'
    hooks:
      - id: flake8
        additional_dependencies: [
          flake8-annotations,
          flake8-docstrings,
          flake8-bugbear,
          flake8-builtins,
          flake8-comprehensions,
          flake8-eradicate,
          flake8-pytest-style,
          flake8-pyprojecttoml,
          flake8-boolean-trap,
          flake8-dunder-class-obj,
          flake8-get-chaining,
          flake8-github-annotations,
          flake8-inflammatory-jargon,
          flake8-noqa,
          flake8-async,
          flake8-keyword-params,
          flake8-mutable,
          flake8-no-debug-vars,
          flake8-picky-parentheses,
          flake8-future-annotations,
          flake8-loopy,
          flake8-pie,
          flake8-secure-coding-standard,
          flake8-simplify,
          flake8-unused-arguments,
          flake8-return,
          flake8-datetimez,
          flake8-import-conventions,
          flake8-typing-as-t,
          flake8-type-checking,
          flake8-pep585,
          flake8-printf-formatting,
          flake8-pep3101,
          flake8-string-format,
          flake8-no-implicit-concat,
          flake8-escaping-style,
          flake8-literal,
          flake8-logging,
          darglint,
          pandas-vet,
          flake8-all-not-strings,
          flake8-absolute-import,
          flake8-assertive,
          flake8-broken-line,
          flake8-class-attributes-order,
          flake8-clean-block,
          flake8-comments,
        ]

  # mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: 'v1.8.0'
    hooks:
      - id: mypy

  # pylint
  # https://pylint.readthedocs.io/en/latest/user_guide/installation/pre-commit-integration.html#pre-commit-integration
  - repo: local
    hooks:
      - id: pylint
        name: pylint
        entry: poetry run pylint -sn
        language: system
        types: [python]

  # bandit
  - repo: https://github.com/PyCQA/bandit
    rev: '1.7.7'
    hooks:
      - id: bandit
        args: ['-q']

  # vulture
  - repo: https://github.com/jendrikseipp/vulture
    rev: 'v2.10'
    hooks:
      - id: vulture

  # pyupgrade
  - repo: https://github.com/asottile/pyupgrade
    rev: 'v3.15.0'
    hooks:
      - id: pyupgrade

  # deptry - only works when run within poetry env, but can't ensure from within pre-commit
  # - repo: https://github.com/fpgmaas/deptry.git
  #   rev: "0.12.0"
  #   hooks:
  #     - id: deptry
  #       types: [python]

  # detect-secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: 'v1.4.0'
    hooks:
      - id: detect-secrets
        args: ['--exclude-lines', 'integrity=']

  # yamllint
  - repo: https://github.com/adrienverge/yamllint.git
    rev: 'v1.33.0'
    hooks:
      - id: yamllint
        args: ['-c', '.dev_config/.yamllint.yaml', '--strict']

  # blocklint
  - repo: https://github.com/PrincetonUniversity/blocklint
    rev: 'v0.2.4'
    hooks:
      - id: blocklint
        args: ['--skip-files=poetry.lock', '--max-issue-threshold=1']

  # markdownlint
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args: ['--config', '.dev_config/.markdownlint.yaml', '--ignore', 'LICENSE.md', '--dot']

  # standard
  - repo: https://github.com/standard/standard
    rev: v17.1.0
    hooks:
      - id: standard

  # html5validator does not work with pre-commit since it checks modified files iteratively.
  # Use `make html5validator` for local testing instead.

  # prettier
  # This pre-commit hook does not respect --ignore-path or --config,
  # so we have to code the settings in here independently.
  # It also runs quite slowly, so just use `make fmt_prettier` instead.
  # - repo: https://github.com/pre-commit/mirrors-prettier
  #   rev: "v4.0.0-alpha.8"
  #   hooks:
  #     - id: prettier
  #       args: ['--no-config', '--print-width', '100', '--single-attribute-per-line']
  #       types_or: [html, css, scss, text]
  #       exclude: '.\.md|.\.yml|.\.yaml|.\.js|.\.min.css|Makefile'

  # checkmake
  - repo: https://github.com/mrtazz/checkmake.git
    rev: '0.2.2'
    hooks:
      - id: checkmake

  # shellcheck
  - repo: https://github.com/koalaman/shellcheck-precommit
    rev: 'v0.9.0'
    hooks:
      - id: shellcheck

  # shfmt
  - repo: https://github.com/scop/pre-commit-shfmt
    rev: 'v3.7.0-4'
    hooks:
      - id: shfmt
        args: ['-bn', '-ci', '-sr', '-s', '-w']

  # pygrep-hooks
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: 'v1.10.0'
    hooks:
      - id: python-check-blanket-noqa
        name: check blanket noqa
        description: 'Enforce that `noqa` annotations always occur with specific codes.'
        entry: '(?i)# noqa(?!: )'
        language: pygrep
        types: [python]
      - id: python-check-blanket-type-ignore
        name: check blanket type ignore
        description: 'Enforce that `# type: ignore` annotations always occur with specific codes.'
        entry: '# type:? *ignore(?!\[|\w)'
        language: pygrep
        types: [python]
      - id: python-check-mock-methods
        name: check for not-real mock methods
        description: >-
            Prevent common mistakes of `assert mck.not_called()`, `assert mck.called_once_with(...)`
            and `mck.assert_called`.
        language: pygrep
        entry: >
            (?x)(
                assert .*\.(
                    not_called|
                    called_
                )|
                # ''.join(rf'(?<!\b{s})' for s in dir(mock) if s.endswith('Mock')))
                (?<!\bAsyncMock)(?<!\bMagicMock)(?<!\bMock)(?<!\bNonCallableMagicMock)(?<!\bNonCallableMock)(?<!\bPropertyMock)
                \.assert_(
                    any_call|
                    called|
                    called_once|
                    called_once_with|
                    called_with|
                    has_calls|
                    not_called
                )($|[^(\w])
            )
        types: [python]
      - id: python-no-eval
        name: check for eval()
        description: 'A quick check for the `eval()` built-in function'
        entry: '\beval\('
        language: pygrep
        types: [python]
      - id: python-no-log-warn
        name: use logger.warning(
        description: 'A quick check for the deprecated `.warn()` method of python loggers'
        entry: '(?<!warnings)\.warn\('
        language: pygrep
        types: [python]
      - id: python-use-type-annotations
        name: type annotations not comments
        description: 'Enforce that python3.6+ type annotations are used instead of type comments'
        entry: '# type(?!: *ignore([^a-zA-Z0-9]|$))'
        language: pygrep
        types: [python]
      - id: rst-backticks
        name: rst ``code`` is two backticks
        description: 'Detect common mistake of using single backticks when writing rst'
        entry: '^(?!    ).*(^| )`[^`]+`([^_]|$)'
        language: pygrep
        types: [rst]
      - id: rst-directive-colons
        name: rst directives end with two colons
        description: 'Detect mistake of rst directive not ending with :: or space before ::'
        entry: '^\s*\.\. [a-z]+(| | :):$'
        language: pygrep
        types: [rst]
      - id: rst-inline-touching-normal
        name: rst ``inline code`` next to normal text
        description: 'Detect mistake of inline code touching normal text in rst'
        entry: '\w``\w'
        language: pygrep
        types: [rst]
      - id: text-unicode-replacement-char
        name: no unicode replacement chars
        description: 'Forbid files which have a UTF-8 Unicode replacement character'
        entry: "\uFFFD"
        language: pygrep
        types: [text]

  # pre-commit-hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: 'v4.5.0'
    hooks:
      #### python
      # simply checks whether the files parse as valid python
      - id: check-ast
      # requires literal syntax when initializing empty or zero python builtin types
      - id: check-builtin-literals
      # checks for debugger imports and py37+ `breakpoint()` calls in python source
      - id: debug-statements
      # checks a common error of defining a docstring after code
      - id: check-docstring-first
      # verifies that test files are named correctly
      - id: name-tests-test
      #### files and file systems
      # trims trailing whitespace
      - id: trailing-whitespace
      # ensures that a file is either empty, or ends with one newline
      - id: end-of-file-fixer
      # replaces or checks mixed line ending
      - id: mixed-line-ending
        args: ['--fix=lf']
      # removes utf-8 byte order marker
      - id: fix-byte-order-marker
      # checks for files that would conflict in case-insensitive filesystems
      - id: check-case-conflict
      # checks for symlinks which do not point to anything
      - id: check-symlinks
      # detects symlinks which are changed to regular files with
      # a content of a path which that symlink was pointing to
      - id: destroyed-symlinks
      # ensures that (non-binary) executables have a shebang
      - id: check-executables-have-shebangs
      # ensures that (non-binary) files with a shebang are executable
      - id: check-shebang-scripts-are-executable
      #### parseable
      # checks json files for parseable syntax
      - id: check-json
      # checks toml files for parseable syntax
      - id: check-toml
      # checks xml files for parseable syntax
      - id: check-xml
      # checks yaml files for parseable syntax
      - id: check-yaml
      #### git
      # don't commit to main
      - id: no-commit-to-branch
        args: ['-b main']
      # checks for files that contain merge conflict strings
      - id: check-merge-conflict
        args: ['--assume-in-merge']
      # prevents giant files from being committed
      - id: check-added-large-files
        args: ['--maxkb=128']
      #### secrets
      # detects *your* aws credentials from the aws cli credentials file
      - id: detect-aws-credentials
        args: ['--allow-missing-credentials']
      # detects the presence of private keys
      - id: detect-private-key
